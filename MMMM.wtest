import viajes.*

describe "Test de viajes" {

  /* test "Los idiomas se informan explícitamente para cada viaje. Cada idioma se puede representar como un String,
p.ej. español o italiano." {
    const v1 = new Viaje(idiomas=["español","italiano"])
    assert.equals("español", v1.idiomas().get(0))
    assert.equals("italiano",v1.idiomas().get(1))
  }
  */
  //VIAJE DE PLAYA
  test "Si la playa tiene 1000 metros de largo, entonces se tarda 2 dias de viaje."{
    const playaDe1000Metros=new ViajeDePlaya(idiomas=["español"],largo=1000)
    assert.equals(2,playaDe1000Metros.cuantosDiasLlevaLaActividad())
  }
  test "Si la playa tiene 1000 metros de largo, entonces no implica esfuerzo."{
    const playaDe1000Metros=new ViajeDePlaya(idiomas=["español"],largo=1000)
    assert.notThat(playaDe1000Metros.implicaEsfuerzo())
  }
  test "Una viaja de playa es para broceanrse"{
    const playaDe1000Metros=new ViajeDePlaya(idiomas=["español"],largo=1000)
    assert.that(playaDe1000Metros.esParaBrocearse())
  }
  //EXCURSIÓN A CIUDAD
  test "una excursión a ciudad normal (no tropical) en la que se visitan 4 atracciones, lleva 2 días."{
    const unaEACNQueSeVisitan4Atracciones=new ExcursionACiudad(idiomas=["ingles"],cantidadDeAtraccionesQueSeVanAVisitar=4)
    assert.equals(2,unaEACNQueSeVisitan4Atracciones.cuantosDiasLlevaLaActividad()) 
  }
  test "una excursión a ciudad normal (no tropical) en la que se visitan 4 atracciones, no implica esfuerzo"{
    const unaEACNQueSeVisitan4Atracciones=new ExcursionACiudad(idiomas=["ingles"],cantidadDeAtraccionesQueSeVanAVisitar=4)
    assert.notThat(unaEACNQueSeVisitan4Atracciones.implicaEsfuerzo()) 
  }
  test "una excursión a ciudad normal (no tropical) en la que se visitan 4 atracciones, no sirve para broncearse"{
    const unaEACNQueSeVisitan4Atracciones=new ExcursionACiudad(idiomas=["ingles"],cantidadDeAtraccionesQueSeVanAVisitar=4)
    assert.notThat(unaEACNQueSeVisitan4Atracciones.esParaBrocearse()) 
  }
  test "una excursión a ciudad tropical en la que se visitan 4 atracciones, lleva 3 días"{
    const unaEACTQueSeVisitan4Atracciones=new ExcursionACiudadTropical(idiomas=["sueco"],cantidadDeAtraccionesQueSeVanAVisitar=4)
    assert.equals(3,unaEACTQueSeVisitan4Atracciones.cuantosDiasLlevaLaActividad()) 
  }
  test "una excursión a ciudad tropical en la que se visitan 4 atracciones, no implica esfuerzo."{
    const unaEACTQueSeVisitan4Atracciones=new ExcursionACiudadTropical(idiomas=["sueco"],cantidadDeAtraccionesQueSeVanAVisitar=4)
    assert.notThat(unaEACTQueSeVisitan4Atracciones.implicaEsfuerzo())
  }
  test "una excursión a ciudad tropical en la que se visitan 4 atracciones, sí sirve para broncearse."{
    const unaEACTQueSeVisitan4Atracciones=new ExcursionACiudadTropical(idiomas=["sueco"],cantidadDeAtraccionesQueSeVanAVisitar=4)
    assert.that(unaEACTQueSeVisitan4Atracciones.esParaBrocearse())
  }
  test "una excursión a ciudad normal (no tropical) en la que se visitan 8 atracciones, lleva 4 días."{
    const unaEACNQueSeVisitan8Atracciones=new ExcursionACiudad(idiomas=["español,guarani"],cantidadDeAtraccionesQueSeVanAVisitar=8)
    assert.equals(4,unaEACNQueSeVisitan8Atracciones.cuantosDiasLlevaLaActividad()) 
  }
  test "una excursión a ciudad normal (no tropical) en la que se visitan 8 atracciones, implica esfuerzo."{
    const unaEACNQueSeVisitan8Atracciones=new ExcursionACiudad(idiomas=["español,guarani"],cantidadDeAtraccionesQueSeVanAVisitar=8)
    assert.that(unaEACNQueSeVisitan8Atracciones.implicaEsfuerzo())
  }
  test "una excursión a ciudad normal (no tropical) en la que se visitan 8 atracciones, no sirve para broncearse."{
    const unaEACNQueSeVisitan8Atracciones=new ExcursionACiudad(idiomas=["español,guarani"],cantidadDeAtraccionesQueSeVanAVisitar=8)
    assert.notThat(unaEACNQueSeVisitan8Atracciones.esParaBrocearse())
  }
  test "una excursión a ciudad tropical en la que se visitan 8 atracciones, lleva 5 días."{
    const unaEACTQueSeVisitan8Atracciones=new ExcursionACiudadTropical(idiomas=["sueco","finlandes","ingles"],cantidadDeAtraccionesQueSeVanAVisitar=8)
    assert.equals(5,unaEACTQueSeVisitan8Atracciones.cuantosDiasLlevaLaActividad()) 
  }
  test "una excursión a ciudad tropical en la que se visitan 8 atracciones, implica esfuerzo."{
    const unaEACTQueSeVisitan8Atracciones=new ExcursionACiudadTropical(idiomas=["sueco","finlandes","ingles"],cantidadDeAtraccionesQueSeVanAVisitar=8)
    assert.that(unaEACTQueSeVisitan8Atracciones.implicaEsfuerzo()) 
  }
  test "una excursión a ciudad tropical en la que se visitan 8 atracciones, sirve para broncearse."{
    const unaEACTQueSeVisitan8Atracciones=new ExcursionACiudadTropical(idiomas=["sueco","finlandes","ingles"],cantidadDeAtraccionesQueSeVanAVisitar=8)
    assert.that(unaEACTQueSeVisitan8Atracciones.esParaBrocearse()) 
  }
  test "una excursión a ciudad tropical en la que se visitan 10 atracciones, lleva 6 días."{
    const unaEACTQueSeVisitan10Atracciones=new ExcursionACiudadTropical(idiomas=["sueco","finlandes","ingles","español","japones"],cantidadDeAtraccionesQueSeVanAVisitar=10)
     assert.equals(6,unaEACTQueSeVisitan10Atracciones.cuantosDiasLlevaLaActividad())
  }
  test "una excursión a ciudad tropical en la que se visitan 10 atracciones, no implica esfuerzo."{
    const unaEACTQueSeVisitan10Atracciones=new ExcursionACiudadTropical(idiomas=["sueco","finlandes","ingles","español","japones"],cantidadDeAtraccionesQueSeVanAVisitar=10)
    assert.notThat(unaEACTQueSeVisitan10Atracciones.implicaEsfuerzo())
  }
  test "una excursión a ciudad tropical en la que se visitan 10 atracciones, sí sirve para broncearse."{
    const unaEACTQueSeVisitan10Atracciones=new ExcursionACiudadTropical(idiomas=["sueco","finlandes","ingles","español","japones"],cantidadDeAtraccionesQueSeVanAVisitar=10)
    assert.that(unaEACTQueSeVisitan10Atracciones.esParaBrocearse())
  }
  //SALIDA DE TREKKING
  test "una salida de 100 kilómetros a un lugar con 130 días de sol por año: lleva 2 días."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["ingles","español"],kilometrosDeSenderos=100,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.equals(2,unaSDTK.cuantosDiasLlevaLaActividad())
  }
  test "una salida de 100 kilómetros a un lugar con 130 días de sol por año: implica esfuerzo."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["ingles","español"],kilometrosDeSenderos=100,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.that(unaSDTK.implicaEsfuerzo())
  }
  test "una salida de 100 kilómetros a un lugar con 130 días de sol por año: no sirve para broncearse."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["ingles","español"],kilometrosDeSenderos=100,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.notThat(unaSDTK.esParaBrocearse())
  }
  test "una salida de 50 kilómetros a un lugar con 240 días de sol por año: lleva 1 día."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["chino","portugues","español"],kilometrosDeSenderos=50,diasDeSolEnElLugarQueSeVaHacer=240)
    assert.equals(1,unaSDTK.cuantosDiasLlevaLaActividad())
  }
  test "una salida de 50 kilómetros a un lugar con 240 días de sol por año: no implica esfuerzo."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["chino","portugues","español"],kilometrosDeSenderos=50,diasDeSolEnElLugarQueSeVaHacer=240)
    assert.notThat(unaSDTK.implicaEsfuerzo())
  }
  test "una salida de 50 kilómetros a un lugar con 240 días de sol por año: sí sirve para broncearse."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["chino","portugues","español"],kilometrosDeSenderos=50,diasDeSolEnElLugarQueSeVaHacer=240)
    assert.that(unaSDTK.esParaBrocearse())
  }
  test "una salida de 250 kilómetros a un lugar con 130 días de sol por año: lleva 5 días."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["español"],kilometrosDeSenderos=250,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.equals(5,unaSDTK.cuantosDiasLlevaLaActividad())
  }
  test "una salida de 250 kilómetros a un lugar con 130 días de sol por año: implica esfuerzo."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["español"],kilometrosDeSenderos=250,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.that(unaSDTK.implicaEsfuerzo())
  }
  test "una salida de 250 kilómetros a un lugar con 130 días de sol por año: sirve para broncearse."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["español"],kilometrosDeSenderos=250,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.that(unaSDTK.esParaBrocearse())
  }
}

describe "Tests de Viajes Interesantes"{
  test "si hay una excursion a ciudad normal y, tiene 5 atracciones y 2 diomas, es interesante."{
    const unaEACN=new ExcursionACiudad(idiomas=["sueco","chino"],cantidadDeAtraccionesQueSeVanAVisitar=5)
    assert.that(unaEACN.esInteresante())
  }
  test "si hay una excursion a ciudad tropical y, tiene 5 atracciones y 5 diomas, es interesante."{
    const unaEACT=new ExcursionACiudad(idiomas=["sueco","chino","español","romano","indio"],cantidadDeAtraccionesQueSeVanAVisitar=5)
    assert.that(unaEACT.esInteresante())
  }
  test "si hay una excursion a ciudad normal que se habla 1 idioma y tiene 3 atracciones, no es interesante."{
    const unaEACN=new ExcursionACiudad(idiomas=["sueco"],cantidadDeAtraccionesQueSeVanAVisitar=3)
    assert.notThat(unaEACN.esInteresante())
  }
  test "si hay una excursion a ciudad tropical que se habla 1 idioma y tiene 6 atracciones, no es interesante."{
    const unaEACT=new ExcursionACiudad(idiomas=["indio"],cantidadDeAtraccionesQueSeVanAVisitar=6)
    assert.notThat(unaEACT.esInteresante())
  }
  test "si una salida de trekking se habla 1 idioma, no es interesante."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["español"],kilometrosDeSenderos=250,diasDeSolEnElLugarQueSeVaHacer=130)
    assert.notThat(unaSDTK.esInteresante())
  }
  test "si una salida de trekking se habla en 3 idiomas y hay 120 dias de sol por año, no es interesante."{
    const unaSDTK=new SalidaDeTrekking(idiomas=["español","chino","ingles"],kilometrosDeSenderos=250,diasDeSolEnElLugarQueSeVaHacer=120)
    assert.notThat(unaSDTK.esInteresante())
  }
  test "si una salidad de trekking se habla 2 idiomas y hay 200 dias de sol por año, es interesante"{
    const unaSDTK=new SalidaDeTrekking(idiomas=["portugues","ingles"],kilometrosDeSenderos=100,diasDeSolEnElLugarQueSeVaHacer=200)
    assert.that(unaSDTK.esInteresante())
  }
}

describe "Test de las Clases De Gimnasia"{
  test "las clases de gimnasia se usa únicamente español."{
    const unaCDG=new ClasesDeGimnasia(idiomas=["español"])
    assert.equals(["español"],unaCDG.idiomas())
  }
  test "Las clases de gimanasia llevan 1 dia"{
    const unaCDG=new ClasesDeGimnasia(idiomas=["español"])
    assert.equals(1,unaCDG.cuantosDiasLlevaLaActividad())
  }
  test "las clases de gimnasia implica esfuerzo"{
    const unaCDG=new ClasesDeGimnasia(idiomas=["español"])
    assert.that(unaCDG.implicaEsfuerzo())
  }
  test "las clases de gimanasia nunca sirven para broceanrse"{
    const unaCDG=new ClasesDeGimnasia(idiomas=["español"])
    assert.notThat(unaCDG.esParaBrocearse())
  }
}

describe "Test de los socios, agregar actividad"{
  const roque = new Socio(nombre="Roque",actividadesQueRealizo=[],maximoDeActividadesQuePuedeRealizar=2,edad=18,idiomasQueHabla=["español"])
  const ana = new Socio(nombre="Ana",actividadesQueRealizo=[],maximoDeActividadesQuePuedeRealizar=3,edad=20,idiomasQueHabla=["español"])
  const v1 = new ViajeDePlaya(idiomas=[],largo=1000)
  const v2 = new ViajeDePlaya(idiomas=[],largo=2000)
  const v3 = new ClasesDeGimnasia(idiomas=[])
  method initialize(){
    roque.registrarActividad(v1)
    roque.registrarActividad(v2)
    //roque.registrarActividad(v3) -> lanza el error (CHEQUEADO)
    ana.registrarActividad(v1)
    ana.registrarActividad(v2)
    ana.registrarActividad(v3)
  }
  test "Roque es adorador del sol"{
    assert.that(roque.esAdoradorDelSol())
  }
  test "De las actividades forzadas de Roque devuelve el viaje de 2000 metros de playa."{
    assert.equals([v2],roque.actividadesEsforzadas())
  }
  test "Ana no es adoradora del sol."{
    assert.notThat(ana.esAdoradorDelSol())
  }
  test "La coleccion de actividades esforzadas de Ana incluye el viaje de playa de 2000 metros y la clase de gimnasia."{
    assert.equals([v2,v3],ana.actividadesEsforzadas())
  }
}

describe "Test de las actividades que le atraen a cada socio"{
  const ruberto = new SocioTranquilo(nombre="Ruberto",actividadesQueRealizo=[],maximoDeActividadesQuePuedeRealizar=2,edad=18,idiomasQueHabla=["español"])
  const aQueLleva5Dias = new SalidaDeTrekking(idiomas=["español"],kilometrosDeSenderos=250,diasDeSolEnElLugarQueSeVaHacer=130)
  const aQueLleva3Dias=new ExcursionACiudadTropical(idiomas=["sueco"],cantidadDeAtraccionesQueSeVanAVisitar=4)
  const vdp1 = new ViajeDePlaya(idiomas=["quechua","aymará"],largo=1000)
  const vdp2 = new ViajeDePlaya(idiomas=["frances","italiano"],largo=2000)
  const roque = new SocioCoherente(nombre="Roque",actividadesQueRealizo=[],maximoDeActividadesQuePuedeRealizar=2,edad=18,idiomasQueHabla=["español"])
  const unaCDG=new ClasesDeGimnasia(idiomas=["español"])
  const ana = new SocioCoherente(nombre="Ana",actividadesQueRealizo=[],maximoDeActividadesQuePuedeRealizar=3,edad=20,idiomasQueHabla=["español"])
  const unaActividadQueNoImplicaEsfuerzo = new SalidaDeTrekking(idiomas=["chino","portugues","español"],kilometrosDeSenderos=50,diasDeSolEnElLugarQueSeVaHacer=240)
  const santi = new SocioRelajado(nombre="Ruberto",actividadesQueRealizo=[],maximoDeActividadesQuePuedeRealizar=2,edad=18,idiomasQueHabla=["español","quechua"])
  method initialize(){
    roque.registrarActividad(vdp1)
    roque.registrarActividad(vdp2)
    ana.registrarActividad(vdp1)
    ana.registrarActividad(vdp2)
    ana.registrarActividad(unaCDG)
  }
  test "Una actividad que lleva 5 dias le atrae a ruberto que es un socio tranquilo" {
    assert.that(ruberto.leAtrae(aQueLleva5Dias))
  }
  test "Una actividad que lleva 3 dias no le atrae a ruberto que es un socio tranquilo" {
    assert.notThat(ruberto.leAtrae(aQueLleva3Dias))
  }
  test "a roque que le encanta el sol y es una socia coherente, una actividad de playa la atrae"{
    assert.that(roque.leAtrae(vdp1))
  }
  test "a roque que le encanta el sol y es una socia coherente, una clase de gimnasia no la atrae"{
    assert.notThat(roque.leAtrae(unaCDG))
  }
  test "a ana que no le encanta el sol y es una socia coherente, una clase de gimnasia la atrae"{
    assert.that(ana.leAtrae(unaCDG))
  }
  test "a ana que no le encanta el sol y es una socia coherente, una actividad que no implique esfuerzo no la atrae"{
    assert.notThat(ana.leAtrae(unaActividadQueNoImplicaEsfuerzo))
  }
  test "a santi que es un socio relajado que habla español y quechua, una actividad en español le va a atraer."{
    assert.that(santi.leAtrae(aQueLleva5Dias))
  }
  test "a santi que habla español y quechua, una actividad en quechua y aymará le va a atraer."{
    assert.that(santi.leAtrae(vdp1))
  }
  test "a santi que habla español y quechua, una actividad en frances e italiano no le va a atraer."{
    assert.notThat(santi.leAtrae(vdp2))
  }
}